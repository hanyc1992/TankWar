
package edu.utexas.yh7483.tankwar;
/*
import java.awt.*;
import java.awt.event.*;

public class Tank {
	
	public static final int TANK_RADIUS = 50;
	public static final int X_PACE = 3;
	public static final int Y_PACE = 3;
	
	public static final Color TANK_COLOR = Color.RED;
	public static final Color PT_COLOR = Color.BLACK;
	
	
	
	int xpos, ypos;
	TankClient tc = null;
	
	private boolean bu = false, bd = false, bl = false, br = false;
	enum Direction {U, D, L, R, UL, UR, DL, DR, STOP};
	private Direction dir = Direction.STOP;
	private Direction ptDir = Direction.D;

	
	public Tank(int xpos, int ypos) {
		this.xpos = xpos;
		this.ypos = ypos;
	}
	
	public Tank(int xpos, int ypos, TankClient tc) {
		this(xpos, ypos);
		this.tc = tc;
	}
	
	public void move() {
		switch(dir) {
		case U: ypos -= Y_PACE; break;
		case D: ypos += Y_PACE; break;
		case L: xpos -= X_PACE; break;
		case R: xpos += X_PACE; break;
		case UL: ypos -= Y_PACE; xpos -= X_PACE; break;
		case UR: ypos -= Y_PACE; xpos += X_PACE; break;
		case DL: ypos += Y_PACE; xpos -= X_PACE; break;
		case DR: ypos += Y_PACE; xpos += X_PACE; break;
		default: break;
		}
	}
	
	private void drawPT(Graphics g) {
		Color c = g.getColor();
		g.setColor(PT_COLOR);
		switch(ptDir) {
		case U: 
			g.drawLine(xpos + TANK_RADIUS / 2, ypos + TANK_RADIUS / 2, xpos + TANK_RADIUS / 2, ypos);
			break;
		case D: 
			g.drawLine(xpos + TANK_RADIUS / 2, ypos + TANK_RADIUS / 2, xpos + TANK_RADIUS / 2, ypos + TANK_RADIUS);
			break;
		case L: 
			g.drawLine(xpos + TANK_RADIUS / 2, ypos + TANK_RADIUS / 2, xpos, ypos + TANK_RADIUS / 2);
			break;
		case R: 
			g.drawLine(xpos + TANK_RADIUS / 2, ypos + TANK_RADIUS / 2, xpos + TANK_RADIUS, ypos + TANK_RADIUS / 2);
			break;
		case UL: 
			g.drawLine(xpos + TANK_RADIUS / 2, ypos + TANK_RADIUS / 2, xpos, ypos);
			break;
		case UR: 
			g.drawLine(xpos + TANK_RADIUS / 2, ypos + TANK_RADIUS / 2, xpos + TANK_RADIUS, ypos);
			break;
		case DL: 
			g.drawLine(xpos + TANK_RADIUS / 2, ypos + TANK_RADIUS / 2, xpos, ypos + TANK_RADIUS);
			break;
		case DR: 
			g.drawLine(xpos + TANK_RADIUS / 2, ypos + TANK_RADIUS / 2, xpos + TANK_RADIUS, ypos + TANK_RADIUS);
			break;
		default: break;
		}
		g.setColor(c);
	}
	
	public void draw(Graphics g) {
		getDirection();
		move();
		
		Color c = g.getColor();
		g.setColor(TANK_COLOR);
		g.fillOval(xpos, ypos, TANK_RADIUS, TANK_RADIUS);
		drawPT(g);
		g.setColor(c);
		
	}
	
	public void keyPressd(KeyEvent e) {
		switch(e.getKeyCode()) {
		case KeyEvent.VK_UP:
			bu = true; break;
		case KeyEvent.VK_DOWN:
			bd = true; break;
		case KeyEvent.VK_LEFT:
			bl = true; break;
		case KeyEvent.VK_RIGHT:
			br = true; break;
		case KeyEvent.VK_CONTROL:
			fire(); break;
		default:
			break;
		}
	}
	
	void getDirection(){
		if(bu && !bd && !bl && !br) dir = Direction.U;
		else if(!bu && bd && !bl && !br) dir = Direction.D;
		else if(!bu && !bd && bl && !br) dir = Direction.L;
		else if(!bu && !bd && !bl && br) dir = Direction.R;
		else if(bu && !bd && bl && !br) dir = Direction.UL;
		else if(bu && !bd && !bl && br) dir = Direction.UR;
		else if(!bu && bd && bl && !br) dir = Direction.DL;
		else if(!bu && bd && !bl && br) dir = Direction.DR;
		else dir = Direction.STOP;
		
		if(dir != Direction.STOP)
			ptDir = dir;
	}

	public void keyReleased(KeyEvent e) {
		switch(e.getKeyCode()) {
		case KeyEvent.VK_UP:
			bu = false; break;
		case KeyEvent.VK_DOWN:
			bd = false; break;
		case KeyEvent.VK_LEFT:
			bl = false; break;
		case KeyEvent.VK_RIGHT:
			br = false; break;
		default:
			break;
		}
	}

	public void fire() {
		int x = xpos + TANK_RADIUS / 2 - Missile.MISSIILE_RADIUS / 2;
		int y = ypos + TANK_RADIUS / 2 - Missile.MISSIILE_RADIUS / 2;
		
		tc.arrMissile.add(new Missile(x, y, ptDir, tc));
	}
	
}
*/








import java.awt.*;
import java.awt.event.*;

public class Tank {
	public static final int XSPEED = 5;
	public static final int YSPEED = 5;
	
	public static final int WIDTH = 30;
	public static final int HEIGHT = 30;
	
	TankClient tc;
	
	private int x, y;
	
	private boolean bL=false, bU=false, bR=false, bD = false;
	enum Direction {L, LU, U, RU, R, RD, D, LD, STOP};
	
	private Direction dir = Direction.STOP;
	private Direction ptDir = Direction.D;

	public Tank(int x, int y) {
		this.x = x;
		this.y = y;
	}
	
	public Tank(int x, int y, TankClient tc) {
		this(x, y);
		this.tc = tc;
	}
	
	public void draw(Graphics g) {
		Color c = g.getColor();
		g.setColor(Color.RED);
		g.fillOval(x, y, WIDTH, HEIGHT);
		g.setColor(c);
		
		switch(ptDir) {
		case L:
			g.drawLine(x + Tank.WIDTH/2, y + Tank.HEIGHT/2, x, y + Tank.HEIGHT/2);
			break;
		case LU:
			g.drawLine(x + Tank.WIDTH/2, y + Tank.HEIGHT/2, x, y);
			break;
		case U:
			g.drawLine(x + Tank.WIDTH/2, y + Tank.HEIGHT/2, x + Tank.WIDTH/2, y);
			break;
		case RU:
			g.drawLine(x + Tank.WIDTH/2, y + Tank.HEIGHT/2, x + Tank.WIDTH, y);
			break;
		case R:
			g.drawLine(x + Tank.WIDTH/2, y + Tank.HEIGHT/2, x + Tank.WIDTH, y + Tank.HEIGHT/2);
			break;
		case RD:
			g.drawLine(x + Tank.WIDTH/2, y + Tank.HEIGHT/2, x + Tank.WIDTH, y + Tank.HEIGHT);
			break;
		case D:
			g.drawLine(x + Tank.WIDTH/2, y + Tank.HEIGHT/2, x + Tank.WIDTH/2, y + Tank.HEIGHT);
			break;
		case LD:
			g.drawLine(x + Tank.WIDTH/2, y + Tank.HEIGHT/2, x, y + Tank.HEIGHT);
			break;
		}
		
		move();
	}
	
	void move() {
		switch(dir) {
		case L:
			x -= XSPEED;
			break;
		case LU:
			x -= XSPEED;
			y -= YSPEED;
			break;
		case U:
			y -= YSPEED;
			break;
		case RU:
			x += XSPEED;
			y -= YSPEED;
			break;
		case R:
			x += XSPEED;
			break;
		case RD:
			x += XSPEED;
			y += YSPEED;
			break;
		case D:
			y += YSPEED;
			break;
		case LD:
			x -= XSPEED;
			y += YSPEED;
			break;
		case STOP:
			break;
		}
		
		if(this.dir != Direction.STOP) {
			this.ptDir = this.dir;
		}
		
		if(x < 0) x = 0;
		if(y < 30) y = 30;
		if(x + Tank.WIDTH > TankClient.GAME_WIDTH) x = TankClient.GAME_WIDTH - Tank.WIDTH;
		if(y + Tank.HEIGHT > TankClient.GAME_HEIGHT) y = TankClient.GAME_HEIGHT - Tank.HEIGHT;
	}
	
	public void keyPressed(KeyEvent e) {
		int key = e.getKeyCode();
		switch(key) {
		case KeyEvent.VK_LEFT :
			bL = true;
			break;
		case KeyEvent.VK_UP :
			bU = true;
			break;
		case KeyEvent.VK_RIGHT :
			bR = true;
			break;
		case KeyEvent.VK_DOWN :
			bD = true;
			break;
		}
		locateDirection();
	}
	
	void locateDirection() {
		if(bL && !bU && !bR && !bD) dir = Direction.L;
		else if(bL && bU && !bR && !bD) dir = Direction.LU;
		else if(!bL && bU && !bR && !bD) dir = Direction.U;
		else if(!bL && bU && bR && !bD) dir = Direction.RU;
		else if(!bL && !bU && bR && !bD) dir = Direction.R;
		else if(!bL && !bU && bR && bD) dir = Direction.RD;
		else if(!bL && !bU && !bR && bD) dir = Direction.D;
		else if(bL && !bU && !bR && bD) dir = Direction.LD;
		else if(!bL && !bU && !bR && !bD) dir = Direction.STOP;
	}

	public void keyReleased(KeyEvent e) {
		int key = e.getKeyCode();
		switch(key) {
		case KeyEvent.VK_CONTROL:
			fire();
			break;
		case KeyEvent.VK_LEFT :
			bL = false;
			break;
		case KeyEvent.VK_UP :
			bU = false;
			break;
		case KeyEvent.VK_RIGHT :
			bR = false;
			break;
		case KeyEvent.VK_DOWN :
			bD = false;
			break;
		}
		locateDirection();		
	}
	
	public Missile fire() {
		int x = this.x + Tank.WIDTH/2 - Missile.MISSIILE_RADIUS/2;
		int y = this.y + Tank.HEIGHT/2 - Missile.MISSIILE_RADIUS/2;
		Missile m = new Missile(x, y, ptDir, this.tc);
		tc.missiles.add(m);
		return m;
	}
}

