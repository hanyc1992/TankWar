package edu.utexas.yh7483.tankwar;

import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Random;

public class TankClient extends Frame{
	
	public static final int ADD_AID_MAX = 30000;
	public static final int ADD_AID_MIN = 10000;
	
	static int MODE = Tank.HARD;
	static String modeStr = (MODE==Tank.EASY)?"Easy":(MODE==Tank.MEDIUM)?"Medium":(MODE==Tank.HARD)?"Hard":"Carzy";
	
	public static final int GAME_WIDTH = 800;
	public static final int GAME_HEIGHT = 600;
	public static final int FLASH_TIME = 30;
	public static final int ELIMINATE_TIME = 200;
	public static final int XSTART = 100;
	public static final int YSTART = 100;
	
	public static final Color BACKGROUND_COLOR = Color.BLACK;
	public static final Color STRING_COLOR = Color.WHITE;
	
	public static Random roll = new Random();
	
	private static Toolkit tk = Toolkit.getDefaultToolkit();
	private static Image[] tankImages = null;
	private static Map<String, Image> imgs = new HashMap<String, Image>();
	static {
		tankImages = new Image[] {
				tk.getImage(Tank.class.getClassLoader().getResource("images/tankL.gif")),
				tk.getImage(Tank.class.getClassLoader().getResource("images/tankLU.gif")),
				tk.getImage(Tank.class.getClassLoader().getResource("images/tankU.gif")),
				tk.getImage(Tank.class.getClassLoader().getResource("images/tankRU.gif")),
				tk.getImage(Tank.class.getClassLoader().getResource("images/tankR.gif")),
				tk.getImage(Tank.class.getClassLoader().getResource("images/tankRD.gif")),
				tk.getImage(Tank.class.getClassLoader().getResource("images/tankD.gif")),
				tk.getImage(Tank.class.getClassLoader().getResource("images/tankLD.gif"))
		};
		
		imgs.put("L", tankImages[0]);
		imgs.put("LU", tankImages[1]);
		imgs.put("U", tankImages[2]);
		imgs.put("RU", tankImages[3]);
		imgs.put("R", tankImages[4]);
		imgs.put("RD", tankImages[5]);
		imgs.put("D", tankImages[6]);
		imgs.put("LD", tankImages[7]);
		
	}
	
	
	Image offScreenImage = null;
	Tank myTank = new Tank(XSTART, YSTART, true, this);
	List<Missile> arrMissile = new ArrayList<Missile>();
	List<Explode> arrExplode = new ArrayList<Explode>();
	List<Tank> arrEnenmy = new ArrayList<Tank>();
	List<Barrier> arrWall = new ArrayList<Barrier>();
	List<Aid> arrAid = new ArrayList<Aid>();
	

	public static void main(String[] args) {
		
		TankClient tc = new TankClient();
		tc.launchFrame();
		
	}
	
	public void launchFrame(){
		
		addWall();
		addEnenmy(4);
		
		this.setLocation(100, 100);
		this.setSize(GAME_WIDTH, GAME_HEIGHT);
		this.setBackground(BACKGROUND_COLOR);
		this.setTitle("TankWar");
		this.setVisible(true);
		this.setResizable(false);
		this.addWindowListener(new WindowAdapter(){
			public void windowClosing(WindowEvent e) {
				System.exit(0);
			}
		});
		this.addKeyListener(new KeyMonitor());
		new Thread(new PaintThread()).start();
		new Thread(new MissileEliminate()).start();
		new Thread(new ExplodeEliminate()).start();
		new Thread(new EnenmyEliminate()).start();
		new Thread(new AddAidThread()).start();
		new Thread(new AidEliminate()).start();
		
	}
	
	public static boolean isInBound(int xpos, int ypos, int xlim, int ylim){
		if (xpos > 0 && xpos < xlim && ypos > 0 && ypos < ylim)
			return true;
		else
			return false;
	}
	
	public void paint(Graphics g) {

		myTank.draw(g);
		
		drawAllMissile(g);
		drawAllExplode(g);
		drawAllEnenmy(g);
		drawAllWall(g);
		drawAllAid(g);
		drawAllString(g);

	}
	
	private void drawAllString(Graphics g) {
		Color c = g.getColor();
		g.setColor(STRING_COLOR);
		//g.drawString("arrMissile count:" + arrMissile.size(), 10, 50);
		//g.drawString("arrExplode count:" + arrExplode.size(), 10, 70);
		g.drawString("Enenmy Tanks:" + arrEnenmy.size(), 10, 50);
		g.drawString("Mode: " + modeStr, 700, 50);
		g.setColor(c);
	}
	
	private void drawAllAid(Graphics g) {
		for(int i=0; i<arrAid.size(); i++) {
			Aid m = arrAid.get(i);
			m.draw(g);
		}
	}
	
	private void drawAllMissile(Graphics g) {
		for(int i=0; i<arrMissile.size(); i++) {
			Missile m = arrMissile.get(i);
			m.draw(g);
		}
	}
	
	private void drawAllExplode(Graphics g) {
		for(int i=0; i<arrExplode.size(); i++) {
			Explode e = arrExplode.get(i);
			e.draw(g);
		}
	}
	
	private void drawAllEnenmy(Graphics g) {
		for(int i=0; i<arrEnenmy.size(); i++) {
			Tank e = arrEnenmy.get(i);
			e.draw(g);
		}
	}
	
	private void drawAllWall(Graphics g) {
		for(int i=0; i<arrWall.size(); i++) {
			Barrier e = arrWall.get(i);
			e.draw(g);
		}
	}
	
	public void update(Graphics g) {
		
		if(offScreenImage == null)
			offScreenImage = this.createImage(GAME_WIDTH, GAME_HEIGHT);
		Graphics gOffScreenImage = offScreenImage.getGraphics();
		
		Color c = gOffScreenImage.getColor();
		gOffScreenImage.setColor(BACKGROUND_COLOR);
		gOffScreenImage.fillRect(0, 0, GAME_WIDTH, GAME_HEIGHT);
		gOffScreenImage.setColor(c);
		
		paint(gOffScreenImage);
		g.drawImage(offScreenImage, 0, 0, null);
		
	}
	
	public void addEnenmy(int num) {
		for(int i = 0; i < num; ++i) {
			int x = roll.nextInt(GAME_WIDTH);
			int y = roll.nextInt(GAME_HEIGHT);
			Tank temp = new Tank(x, y, false, this);
			
			while(temp.hitBarriers(arrWall) || temp.hitTanks(arrEnenmy) || temp.hitTank(myTank)) {
				x = roll.nextInt(GAME_WIDTH);
				y = roll.nextInt(GAME_HEIGHT);
				temp = new Tank(x, y, false, this);
			}
			
			arrEnenmy.add(temp);
		}
	}
	
	public void addWall() {
		arrWall.add(new Barrier(300, 300, 15, 300, this));
		arrWall.add(new Barrier(450, 400, 200, 15, this));
		arrWall.add(new Barrier(180, 200, 200, 15, this));
	}
	
	public void addAid() {
		if(arrAid.size() <= 5)
			arrAid.add(new Aid(roll.nextInt(GAME_WIDTH), roll.nextInt(GAME_HEIGHT), this));
	}
	
	private class AddAidThread implements Runnable{

		public void run() {
			while(true){
				try {
					Thread.sleep(roll.nextInt(ADD_AID_MAX - ADD_AID_MIN) + ADD_AID_MIN);
					addAid();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
		
	}
	
	private class AidEliminate implements Runnable {

		public void run() {
			while(true){
				try {
					Thread.sleep(ELIMINATE_TIME);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				for (int i = 0; i < arrAid.size(); ++i)
					if(arrAid.get(i).live == false)
						arrAid.remove(i);
			}
		}
		
	}
	
	
	private class PaintThread implements Runnable{

		public void run() {
			while(true){
				repaint();
				try {
					Thread.sleep(FLASH_TIME);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
		
	}
	
	private class KeyMonitor extends KeyAdapter{

		public void keyReleased(KeyEvent e) {
			myTank.keyReleased(e);
				
			switch(e.getKeyCode()) {
			case KeyEvent.VK_F2:
				if(myTank.live == false)
					myTank = new Tank(XSTART, YSTART, true, TankClient.this);
				break;
			case KeyEvent.VK_F1:
				switch(MODE){
				case(Tank.EASY): addEnenmy(3); break;
				case(Tank.MEDIUM): addEnenmy(4); break;
				case(Tank.HARD): addEnenmy(5); break;
				case(Tank.CRAZY): addEnenmy(6); break;
				default: break;
				}
				break;
			case KeyEvent.VK_DELETE:
				for (int i = 0; i < arrEnenmy.size(); ++i)
					arrEnenmy.get(i).live = false;
				break;
			case KeyEvent.VK_1:
				MODE = Tank.EASY; 
				modeStr = (MODE==Tank.EASY)?"Easy":(MODE==Tank.MEDIUM)?"Medium":(MODE==Tank.HARD)?"Hard":"Carzy";
				break;
			case KeyEvent.VK_2:
				MODE = Tank.MEDIUM; 
				modeStr = (MODE==Tank.EASY)?"Easy":(MODE==Tank.MEDIUM)?"Medium":(MODE==Tank.HARD)?"Hard":"Carzy";
				break;
			case KeyEvent.VK_3:
				MODE = Tank.HARD; 
				modeStr = (MODE==Tank.EASY)?"Easy":(MODE==Tank.MEDIUM)?"Medium":(MODE==Tank.HARD)?"Hard":"Carzy";
				break;
			case KeyEvent.VK_4:
				MODE = Tank.CRAZY; 
				modeStr = (MODE==Tank.EASY)?"Easy":(MODE==Tank.MEDIUM)?"Medium":(MODE==Tank.HARD)?"Hard":"Carzy";
				break;
			default:
				break;
			}
				
		}

		public void keyPressed(KeyEvent e) {
			myTank.keyPressed(e);
		}
		
	}
	
	private class MissileEliminate implements Runnable {

		public void run() {
			while(true){
				try {
					Thread.sleep(ELIMINATE_TIME);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				for (int i = 0; i < arrMissile.size(); ++i)
					if(arrMissile.get(i).isLive() == false)
						arrMissile.remove(i);
			}
		}
		
	}
	
	private class ExplodeEliminate implements Runnable {

		public void run() {
			while(true){
				try {
					Thread.sleep(ELIMINATE_TIME);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				for (int i = 0; i < arrExplode.size(); ++i)
					if(arrExplode.get(i).live == false)
						arrExplode.remove(i);
			}
		}
		
	}
	
	private class EnenmyEliminate implements Runnable {

		public void run() {
			while(true){
				try {
					Thread.sleep(ELIMINATE_TIME);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				for (int i = 0; i < arrEnenmy.size(); ++i)
					if(arrEnenmy.get(i).live == false)
						arrEnenmy.remove(i);
			}
		}
		
	}

}

